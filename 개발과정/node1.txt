node설치, atom에디터 설치 후

node 예제)

helloWorld.js 파일을 아래와 같이 작성한다.

var http = require('http');

http.createServer(function(req,res){
  res.writeHead(200, { 'Content-Type' : 'text/plain'});
  res.end('Hello world!');
}).listen(3000);

console.log('Server started on localhost:3000; press-C to terminate....');

node helloWorld.js 로 실행한다.

--------------------------------------------------

npm install [-g] [--save] [package name]

-g : 글로벌로 설치
--save : package.json 파일을 갱신한다.


npm 사용 예1)

npm init
몇가지 질문에 대한 답을 하면 package.json을 만들게 된다.


npm 사용 예2)

npm install --save express

node_modules디렉토리에 설치한다. package.json파일을 업데이트 한다.

github 사용을 할 경우 .gitignore파일에 node_modules를 추가한다.

ex>

.gitignore 내용
#npm에서 설치한 패키지를 무시한다.
node_modules

수정된 package.json 파일.
C:\Users\bit-user\Desktop\goclass>type package.json
{
  "name": "goclass",
  "version": "1.0.0",
  "description": "",
  "main": "index.js",
  "dependencies": {
    "express": "^4.13.4"
  },
  "devDependencies": {},
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "urstory",
  "license": "ISC"
}


npm 사용 예3)

npm install --save express3-handlebars

http://handlebarsjs.com/ 사용법.

index.js 파일을 작성한다.

node index.js 로 실행한다.

http://localhost:3000/index.js 로 예제를 확인한다.


npm 사용 예4)
npm install

node_modules폴더를 삭제하더라도 다시 받아온다.
-------------------------------------------------- ch05 시작.


nodemon : 변경시 자동으로 서버를 재시작해주는 모니터 유틸리티

http://nodemon.io/

nodemon 그런트 플러그인 : https://github.com/ChrisWren/grunt-nodemon

-------------------------------------------------

테스트 프레임워크 : mocha

npm install --save-dev mocha

--save-dev : 개발시에만 사용하는 모듈을 추가한다.

tip : 타사 라이브러리는 vendor와 같은 특별한 디렉터리에 담는 것이 좋다.

chai 어셔션 라이브러리 : 테스트 할 경우 assert, expect함수를 이용한다.

npm install --save-dev chai

node_modules 에 있는 mocha.js, mocha.css , chai.js 를 public/vender에 복사한다.

copy node_modules\mocha\mocha.css public\vendor\.
copy node_modules\mocha\mocha.js public\vendor\.
copy node_modules\chai\chai.js public\vendor\.

-------------------------------------------------

셀레늄(Selenium), 팬텀(JSPhantomJS), 좀비(zombie)

http://zombie.js.org/

브라우저 엔진을 사용하지 않기 때문에, 브라우저 기능을 테스트 할 수 없지만, 기본 기능을 테스트 하는데는 충분.

npm install --save-dev zombie

npm instal -g mocha

글로벌로 설치해야 콘솔에서 mocha를 실행할 수 있다.

mocha -u tdd -R spec qa/tests-unit.js
mocha -u tdd -R spec qa/tests-crosspage.js
mocha -u tdd -R spec qa/tests-unit.js
-------------------------------------------------

린트 프로그램

- 좋은 린트 프로그램이 있으면 눈이 한쌍 더 있는 것이나 마찬가지이다.

자바스크립트용 린트 : 더글러스 크록퍼드가 만든 JSLint라는 것이 원래 있었다.

2011년 안톤 코발료프가 포크하여 JSHint를 만들었다. JSLint는 완고하여 좀더 자유스럽게 만듬

npm install -g jshint


index.js에 다음의 내용을 추가

if( app.thing == null)
  console.log('bleat!');

jshint index.js
위와 같이 실행하면 아래와 같이 오류 발생. === 로 수정하면 문제가 해결된다.


C:\Users\bit-user\Desktop\goclass>jshint index.js
index.js: line 6, col 15, Use '===' to compare with 'null'.

1 error


** jshint는 여러 에디터에서 에드온을 제공하고 있다.

------------------------------------------------------
링크체커 - linkchecker

https://wummel.github.io/linkchecker/

다운로드후 설치

C:\Program Files (x86)\LinkChecker 를 환경변수 Path에 추가한다.

linkchecker http://localhost:3000

으로 실행
------------------------------------------------------
그런트를 위한 자동화

sudo npm install -g grunt-cli
npm install --save-dev grunt

필요한 플러그인 설치

npm install --save-dev grunt-cafe-mocha
npm install --save-dev grunt-contrib-jshint
npm install --save-dev grunt-exec

Gruntfile.js 파일을 만든다.

실행
grunt

** commit하기 전에 grunt하는 습관을 가지도록 한다.


------------------------------------------------------ ch05 끝
요청객체

요청 객체는 콜백에 전달되므로 이름은 원하는 대로 정해도 된다.
보통 req나 request를 사용. http.IncomingMessage인스턴스에서 시작하며 익스프레스에서 기능을 추가한다.

 req.params : 라우트 매개변수
 req.param(name) : 이름붙은 라우트 매개변수나 GET, POST매개변수를 반환 - 쓰지않기를 권함
 req.query : 쿼리스트링(get매개변수)
 req.body : post매개변수를 담고 있는 객체
 req.route : 현재 일치한 라우트에 대한 정보, 라우트 디버깅에 유용
 req.cookies, req.signedCookies : 클라이언트에서 전달한 쿠키 값을 담고 있는 객체
 req.headers : 클라이언트에서 받은 요청 헤더
 req.accepts([types]) : 클라이언트가 주어진 타입을 받는지 확인하는 간편 메소드.
          옵션인 types에는 application/json같은 마임 타입이나 쉼표로 구분한 목록, 배열을 쓸수 있다.
          이 메소드는 공용 api를 만드는 사람에게 유용하며, 브라우저는 항상 기본값으로 HTML을 받는다고 가정한다.
req.ip : 클라이언트 ip주소
req.path : 프로토콜, 호스트, 포트, 쿼리스트링을 제외한 요청 경로
req.host : 클라이언트에서 보고한 호스트 이름을 반환하는 간편 메소드. 이 정보는 조작될 수 있으므로
          보안 목적으로 사용하면 안됨
req.xhr : 요청이 AJAX호출에서 시작됐다면 true를 반환하는 간편 프로퍼티
req.protocol : 현재 요청을 만드는데 사용된 프로토콜. http or https
req.secure : 보안 연결이면 true를 반환하는 간편 프로퍼티. req.protocol === 'https' 와 같음
req.url, req.originalUrl : 유명무실. 경로와 쿼리스틀링을 반환.
            req.url은 내부 라우팅 목적으로 고쳐 쓸 수 있지만, req.originalUrl은 원래 요청과 쿼리스트링을
            보관할 목적으로 사용
req.acceptedLanguages : 클라이언트가 선호하는 자연어 목록을 배열로 반환하는 간편 메소드.
            이 정보는 요청 해더에서 파싱한다.
-----------------------------------------------------------

응답객체

응답객체는 콜백에 전달되므로 이름은 원하는대로 정해도 된다. 보통 res, response를 사용한다.
응답객체는 핵심 노드 객체인 http.ServerResponse인스턴스에서 시작하여 익스프레스에서 기능을 추가한다.

res.status(code) : http상태 코드를 설정한다. 기본값은 200(성공), 404(찾을수 없음), 500(내부 서버 오류)
res.set(name, value) : 응답 헤더를 설정한다. 일반적으로 이 헤더를 쓸일은 별로 없음
res.cookie(name, value, [options]), res.clearCookie(name, [options]) : 쿠키를 설정하거나 제거한다.
res.redirect([status], url) : 브라우저를 리다이렉트한다.
res.send(body), res.send(status, body) : 클라이언트에 응답을 보내며, 상태코드는 옵션이다.
      익스프레스의 기본 콘텐츠 타입은 text/html이기 때문에 바꾸려면  res.send()를 호출하기 전에
      res.set('Content-Type', '타입명')을 호출해야 한다.
      json을 보낼 거라면 명시적으로 res.json()을 사용한다.
res.json(json), res.json(status, json) : 클라이언트에 json을 보내며, 상태 코드는 옵션이다.
res.jsonp(json), res.jsonp(status, json) : 클라이언트에 jsonp를 보내며, 상태 코드는 옵션이다.
res.type(type) : Content-Type을 설정하는 간편 메소드이다. res.type('txt') 라고 확장자만 보내면
        res.set('Content-Type', 'text/plain')으로 보내주기도 한다. 하지만, 정확한 마임타입을 쓰도록 하자.
res.format(object) : Accept 요청 헤더에 따른 콘텐츠를 전송할 수 있는 메소드이다. 이 메소드는 주로 API에서 사용한다.
        res.format({'text/pain' : 'hi there', 'text/html' : '<b>hi there</b>'}) 처럼 사용가능하다.
res.attachment([filename]), res.download(path, [filename], [callback]) : 이 두 메소드는 모두 응답헤더 Content-Disposition를
      attachment로 설정한다. 이 값은 브라우저에서 콘텐츠를 표시하지 않고 내려받으라는 뜻이다. filename을 브라우저에
      hint로 제공할 수 있다. res.download로 내려받을 파일을 지정할 수 있지만, res.attachment는 헤더를 설정할 뿐만
      아니라 컨텐츠를 클라이언트에 전송하는 코드가 따로 필요하다.
res.sendFile(path, [options], [callback]) : 이 메소드는 path의 파일을 읽고 그 콘텐츠를 클라이언트에 전송한다.
  이 메소드를 쓸일은 거의 없다. static미들웨어를 사용하고 클라이언트에 보낼 파일은 public디렉토리에 넣으면 된다.
  하지만, 같은 URL에서도 조건에 따른 다른 자원을 전송한다면 이 메소드가 편리할 수 있다.
res.links(links) : Links응답헤더를 설정한다. 이 헤더는 특수한 헤더이며 애플리케이션 대부분에서 필요없다.
res.locals, res.render(view, [locals], callback) : res.locals는 뷰를 랜더링하는 기본 콘텍스트가 들어 있는
      객체이다. res.render는 설정된 템플릿 엔진을 써서 뷰를 랜더링한다.
      (res.render의 locals매개변수와 res.locals를 혼동해서는 안된다.  locals매개변수는 res.locals의
      콘텍스트를 오버라이딩 하지만, 오버라이딩 하지 않은 콘텍스트는 여전히 사용할 수 없다.)
      res.render의 기본 응답코드는 200이다. 다른 응답 코드를 사용하려면 res.status를 사용한다.

-----------------------------------------------------------

익스프레스 api 문서 : http://expressjs.com/api.html
익스프레스 소스 : https://github.com/visionmedia/express/tree/master

lib/application.js : 주요 익스프레스 인터페이스. 미들웨어가 어떻게 연결됐는지, 뷰가 어떻게 랜더링 되는지 알 고 싶을 경우 본다.
lib/express.js : 커넥트와 lib/application.js기능을 연결하는 비교적 짧은 셸이며, 실제 익스프레스 앱을 실행할 때
          http.createServer와 함께 사용할 함수를 반환한다.
lib/request.js : 노드의 http.IncomingMessage객체를 확장해 요청객체를 만든다.
lib/response.js : 노드의 http.ServerResponse객체를 확장해 응답객체를 만든다.
lib/router/route.js : 기본 라우팅 지원기능을 제공한다. 라우팅은 모든앱에 핵심적인 기능이지만 이 파일은 200행도
      안되는 매우 단순하고 우아한 코드로 작성되어 있다.

익스프레스 소스 코드를 연구하다보면 노드문서 (http://nodejs.org/api/http.html), 특히 http모듈 섹션으 참고하고
싶을 것이다.

-----------------------------------------------------------
